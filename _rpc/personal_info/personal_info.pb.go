// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: personal_info.proto

/*
	Package personalinfo is a generated protocol buffer package.

	It is generated from these files:
		personal_info.proto

	It has these top-level messages:
		UpsertPersonalInfoOpts
		PersonalInfoPayload
*/
package personalinfo

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/canary-health/idp/_rpc/users"
import _ "github.com/canary-health/protobuf/types"
import _ "github.com/canary-health/protobuf/types"
import _ "github.com/canary-health/protobuf/types"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UpsertPersonalInfoOpts struct {
	UserUUID            string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty" db:"user_uuid"`
	FirstName           string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" db:"first_name"`
	LastName            string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" db:"last_name"`
	Gender              string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthdate           string `protobuf:"bytes,5,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	PhoneNumber         string `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty" db:"phone_number"`
	PhoneNumberCode     string `protobuf:"bytes,7,opt,name=phone_number_code,json=phoneNumberCode,proto3" json:"phone_number_code,omitempty" db:"phone_number_code"`
	PhoneNumberVerified bool   `protobuf:"varint,8,opt,name=phone_number_verified,json=phoneNumberVerified,proto3" json:"phone_number_verified,omitempty" db:"phone_number_verified"`
	StreetAddress       string `protobuf:"bytes,9,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty" db:"street_address"`
	StreetAddress2      string `protobuf:"bytes,10,opt,name=street_address2,json=streetAddress2,proto3" json:"street_address2,omitempty" db:"street_address2"`
	City                string `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	StateProvince       string `protobuf:"bytes,12,opt,name=state_province,json=stateProvince,proto3" json:"state_province,omitempty" db:"state_province"`
	ZipPostal           string `protobuf:"bytes,13,opt,name=zip_postal,json=zipPostal,proto3" json:"zip_postal,omitempty" db:"zip_postal"`
	Country             string `protobuf:"bytes,14,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *UpsertPersonalInfoOpts) Reset()         { *m = UpsertPersonalInfoOpts{} }
func (m *UpsertPersonalInfoOpts) String() string { return proto.CompactTextString(m) }
func (*UpsertPersonalInfoOpts) ProtoMessage()    {}
func (*UpsertPersonalInfoOpts) Descriptor() ([]byte, []int) {
	return fileDescriptorPersonalInfo, []int{0}
}

func (m *UpsertPersonalInfoOpts) GetUserUUID() string {
	if m != nil {
		return m.UserUUID
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetBirthdate() string {
	if m != nil {
		return m.Birthdate
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetPhoneNumberCode() string {
	if m != nil {
		return m.PhoneNumberCode
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetPhoneNumberVerified() bool {
	if m != nil {
		return m.PhoneNumberVerified
	}
	return false
}

func (m *UpsertPersonalInfoOpts) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetStreetAddress2() string {
	if m != nil {
		return m.StreetAddress2
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetStateProvince() string {
	if m != nil {
		return m.StateProvince
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetZipPostal() string {
	if m != nil {
		return m.ZipPostal
	}
	return ""
}

func (m *UpsertPersonalInfoOpts) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type PersonalInfoPayload struct {
	UserUUID            string     `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty" db:"user_uuid"`
	FirstName           string     `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" db:"first_name"`
	LastName            string     `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" db:"last_name"`
	Gender              string     `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthdate           string     `protobuf:"bytes,5,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	PhoneNumber         string     `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty" db:"phone_number"`
	PhoneNumberCode     string     `protobuf:"bytes,7,opt,name=phone_number_code,json=phoneNumberCode,proto3" json:"phone_number_code,omitempty" db:"phone_number_code"`
	PhoneNumberVerified bool       `protobuf:"varint,8,opt,name=phone_number_verified,json=phoneNumberVerified,proto3" json:"phone_number_verified,omitempty" db:"phone_number_verified"`
	StreetAddress       string     `protobuf:"bytes,9,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty" db:"street_address"`
	StreetAddress2      string     `protobuf:"bytes,10,opt,name=street_address2,json=streetAddress2,proto3" json:"street_address2,omitempty" db:"street_address2"`
	City                string     `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	StateProvince       string     `protobuf:"bytes,12,opt,name=state_province,json=stateProvince,proto3" json:"state_province,omitempty" db:"state_province"`
	ZipPostal           string     `protobuf:"bytes,13,opt,name=zip_postal,json=zipPostal,proto3" json:"zip_postal,omitempty" db:"zip_postal"`
	Country             string     `protobuf:"bytes,14,opt,name=country,proto3" json:"country,omitempty"`
	CreatedAt           *time.Time `protobuf:"bytes,996,opt,name=created_at,json=createdAt,stdtime" json:"created_at,omitempty" db:"created_at"`
	UpdatedAt           *time.Time `protobuf:"bytes,997,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at,omitempty" db:"updated_at"`
	ArchivedAt          *time.Time `protobuf:"bytes,998,opt,name=archived_at,json=archivedAt,stdtime" json:"archived_at,omitempty" db:"archived_at"`
	DeletedAt           *time.Time `protobuf:"bytes,999,opt,name=deleted_at,json=deletedAt,stdtime" json:"deleted_at,omitempty" db:"deleted_at"`
}

func (m *PersonalInfoPayload) Reset()                    { *m = PersonalInfoPayload{} }
func (m *PersonalInfoPayload) String() string            { return proto.CompactTextString(m) }
func (*PersonalInfoPayload) ProtoMessage()               {}
func (*PersonalInfoPayload) Descriptor() ([]byte, []int) { return fileDescriptorPersonalInfo, []int{1} }

func (m *PersonalInfoPayload) GetUserUUID() string {
	if m != nil {
		return m.UserUUID
	}
	return ""
}

func (m *PersonalInfoPayload) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *PersonalInfoPayload) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *PersonalInfoPayload) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *PersonalInfoPayload) GetBirthdate() string {
	if m != nil {
		return m.Birthdate
	}
	return ""
}

func (m *PersonalInfoPayload) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *PersonalInfoPayload) GetPhoneNumberCode() string {
	if m != nil {
		return m.PhoneNumberCode
	}
	return ""
}

func (m *PersonalInfoPayload) GetPhoneNumberVerified() bool {
	if m != nil {
		return m.PhoneNumberVerified
	}
	return false
}

func (m *PersonalInfoPayload) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *PersonalInfoPayload) GetStreetAddress2() string {
	if m != nil {
		return m.StreetAddress2
	}
	return ""
}

func (m *PersonalInfoPayload) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *PersonalInfoPayload) GetStateProvince() string {
	if m != nil {
		return m.StateProvince
	}
	return ""
}

func (m *PersonalInfoPayload) GetZipPostal() string {
	if m != nil {
		return m.ZipPostal
	}
	return ""
}

func (m *PersonalInfoPayload) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PersonalInfoPayload) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PersonalInfoPayload) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PersonalInfoPayload) GetArchivedAt() *time.Time {
	if m != nil {
		return m.ArchivedAt
	}
	return nil
}

func (m *PersonalInfoPayload) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*UpsertPersonalInfoOpts)(nil), "canaryhealth.idp.personal_info.UpsertPersonalInfoOpts")
	proto.RegisterType((*PersonalInfoPayload)(nil), "canaryhealth.idp.personal_info.PersonalInfoPayload")
}
func (m *UpsertPersonalInfoOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPersonalInfoOpts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserUUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.UserUUID)))
		i += copy(dAtA[i:], m.UserUUID)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Birthdate) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.Birthdate)))
		i += copy(dAtA[i:], m.Birthdate)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneNumberCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.PhoneNumberCode)))
		i += copy(dAtA[i:], m.PhoneNumberCode)
	}
	if m.PhoneNumberVerified {
		dAtA[i] = 0x40
		i++
		if m.PhoneNumberVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StreetAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.StreetAddress)))
		i += copy(dAtA[i:], m.StreetAddress)
	}
	if len(m.StreetAddress2) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.StreetAddress2)))
		i += copy(dAtA[i:], m.StreetAddress2)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.StateProvince) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.StateProvince)))
		i += copy(dAtA[i:], m.StateProvince)
	}
	if len(m.ZipPostal) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.ZipPostal)))
		i += copy(dAtA[i:], m.ZipPostal)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	return i, nil
}

func (m *PersonalInfoPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalInfoPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserUUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.UserUUID)))
		i += copy(dAtA[i:], m.UserUUID)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Birthdate) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.Birthdate)))
		i += copy(dAtA[i:], m.Birthdate)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneNumberCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.PhoneNumberCode)))
		i += copy(dAtA[i:], m.PhoneNumberCode)
	}
	if m.PhoneNumberVerified {
		dAtA[i] = 0x40
		i++
		if m.PhoneNumberVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StreetAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.StreetAddress)))
		i += copy(dAtA[i:], m.StreetAddress)
	}
	if len(m.StreetAddress2) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.StreetAddress2)))
		i += copy(dAtA[i:], m.StreetAddress2)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.StateProvince) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.StateProvince)))
		i += copy(dAtA[i:], m.StateProvince)
	}
	if len(m.ZipPostal) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.ZipPostal)))
		i += copy(dAtA[i:], m.ZipPostal)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(types.SizeOfStdTime(*m.CreatedAt)))
		n1, err := types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(types.SizeOfStdTime(*m.UpdatedAt)))
		n2, err := types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ArchivedAt != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(types.SizeOfStdTime(*m.ArchivedAt)))
		n3, err := types.StdTimeMarshalTo(*m.ArchivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DeletedAt != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintPersonalInfo(dAtA, i, uint64(types.SizeOfStdTime(*m.DeletedAt)))
		n4, err := types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintPersonalInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpsertPersonalInfoOpts) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserUUID)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.Birthdate)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.PhoneNumberCode)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	if m.PhoneNumberVerified {
		n += 2
	}
	l = len(m.StreetAddress)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.StreetAddress2)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.StateProvince)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.ZipPostal)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	return n
}

func (m *PersonalInfoPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserUUID)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.Birthdate)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.PhoneNumberCode)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	if m.PhoneNumberVerified {
		n += 2
	}
	l = len(m.StreetAddress)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.StreetAddress2)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.StateProvince)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.ZipPostal)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPersonalInfo(uint64(l))
	}
	if m.CreatedAt != nil {
		l = types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovPersonalInfo(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovPersonalInfo(uint64(l))
	}
	if m.ArchivedAt != nil {
		l = types.SizeOfStdTime(*m.ArchivedAt)
		n += 2 + l + sovPersonalInfo(uint64(l))
	}
	if m.DeletedAt != nil {
		l = types.SizeOfStdTime(*m.DeletedAt)
		n += 2 + l + sovPersonalInfo(uint64(l))
	}
	return n
}

func sovPersonalInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPersonalInfo(x uint64) (n int) {
	return sovPersonalInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpsertPersonalInfoOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPersonalInfoOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPersonalInfoOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumberCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumberCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumberVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneNumberVerified = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetAddress2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetAddress2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipPostal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipPostal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalInfoPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalInfoPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalInfoPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumberCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumberCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumberVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneNumberVerified = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetAddress2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetAddress2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipPostal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipPostal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 996:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 997:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 998:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArchivedAt == nil {
				m.ArchivedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.ArchivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonalInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPersonalInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPersonalInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonalInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPersonalInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPersonalInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPersonalInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPersonalInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPersonalInfo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("personal_info.proto", fileDescriptorPersonalInfo) }

var fileDescriptorPersonalInfo = []byte{
	// 761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0x4d, 0x6f, 0xfb, 0x34,
	0x1c, 0xc7, 0x09, 0xec, 0xa1, 0x71, 0xbb, 0x8e, 0xb9, 0x6c, 0x98, 0x0a, 0x25, 0x53, 0x4e, 0xbb,
	0x2c, 0x95, 0x3a, 0x69, 0x42, 0x43, 0x42, 0x6a, 0x41, 0xa0, 0x5d, 0x46, 0x15, 0xe8, 0x0e, 0x5c,
	0x22, 0x37, 0x76, 0x5b, 0x4b, 0x69, 0x1c, 0x39, 0xce, 0xa4, 0xee, 0x55, 0xec, 0x1d, 0x71, 0xe5,
	0xc8, 0x2b, 0x08, 0xa8, 0x3c, 0x1d, 0xb8, 0xe5, 0x15, 0xa0, 0x38, 0x49, 0x93, 0xae, 0xe3, 0xbf,
	0xed, 0xfa, 0xd7, 0x2e, 0x95, 0x7f, 0x0f, 0x9f, 0xef, 0xef, 0xdb, 0xc4, 0xb2, 0x03, 0x3a, 0x21,
	0x15, 0x11, 0x0f, 0xb0, 0xef, 0xb2, 0x60, 0xca, 0xed, 0x50, 0x70, 0xc9, 0xa1, 0xe1, 0xe1, 0x00,
	0x8b, 0xe5, 0x9c, 0x62, 0x5f, 0xce, 0x6d, 0x46, 0x42, 0x7b, 0xa3, 0xab, 0x7b, 0x3e, 0x63, 0x72,
	0x1e, 0x4f, 0x6c, 0x8f, 0x2f, 0x7a, 0x33, 0x3e, 0xe3, 0x3d, 0x85, 0x4d, 0xe2, 0xa9, 0x8a, 0x54,
	0xa0, 0x56, 0xb9, 0x5c, 0xd7, 0x9c, 0x71, 0x3e, 0xf3, 0x69, 0xd5, 0x25, 0xd9, 0x82, 0x46, 0x12,
	0x2f, 0xc2, 0xa2, 0xe1, 0xa2, 0xa6, 0x97, 0x8f, 0x3e, 0xcf, 0x67, 0xf7, 0x18, 0x09, 0x7b, 0xae,
	0x08, 0xbd, 0x5e, 0x1c, 0x51, 0x11, 0xe5, 0xbf, 0x05, 0x74, 0xf5, 0xbf, 0x50, 0x35, 0x67, 0x19,
	0xd2, 0xa8, 0x87, 0xe5, 0x8f, 0xe5, 0xbc, 0x92, 0xed, 0xbf, 0x94, 0x8d, 0x63, 0x46, 0x0a, 0xe6,
	0xf2, 0xa5, 0x8c, 0xcf, 0x22, 0xf9, 0x7d, 0x28, 0x8b, 0x59, 0xd6, 0xbf, 0xbb, 0xe0, 0x64, 0x1c,
	0x46, 0x54, 0xc8, 0x51, 0xf1, 0x10, 0xaf, 0x83, 0x29, 0xcf, 0x1a, 0xe0, 0x97, 0x40, 0xcf, 0xfe,
	0x91, 0x9b, 0x4d, 0x41, 0xda, 0xa9, 0x76, 0xa6, 0x0f, 0x8d, 0x55, 0x62, 0x36, 0xc6, 0x11, 0x15,
	0xe3, 0xf1, 0xf5, 0x37, 0x69, 0x62, 0xb6, 0xc9, 0xe4, 0xca, 0x5a, 0x37, 0x59, 0x4e, 0x23, 0x5b,
	0x8f, 0x63, 0x46, 0x60, 0x1f, 0x80, 0x29, 0x13, 0x91, 0x74, 0x03, 0xbc, 0xa0, 0xe8, 0x43, 0x45,
	0x77, 0xd2, 0xc4, 0x3c, 0xcc, 0x88, 0xaa, 0x62, 0x39, 0xba, 0x0a, 0x6e, 0xf0, 0x82, 0xc2, 0x1e,
	0xd0, 0x7d, 0x5c, 0x22, 0x1f, 0x29, 0x04, 0x96, 0x43, 0xd6, 0x05, 0xcb, 0x69, 0x64, 0x6b, 0x05,
	0x9c, 0x80, 0xbd, 0x19, 0x0d, 0x08, 0x15, 0x68, 0x27, 0xeb, 0x76, 0x8a, 0x08, 0x7e, 0x0e, 0xf4,
	0x09, 0x13, 0x72, 0x4e, 0xb0, 0xa4, 0x68, 0x57, 0x95, 0xaa, 0x04, 0xfc, 0x02, 0xb4, 0xc2, 0x39,
	0x0f, 0xa8, 0x1b, 0xc4, 0x8b, 0x09, 0x15, 0x68, 0x4f, 0x4d, 0x3a, 0x4e, 0x13, 0xf3, 0x28, 0x9b,
	0x54, 0xaf, 0x59, 0x4e, 0x53, 0x85, 0x37, 0x2a, 0x82, 0xdf, 0x82, 0xa3, 0x7a, 0xd5, 0xf5, 0x38,
	0xa1, 0x68, 0x5f, 0xe1, 0xdd, 0x34, 0x31, 0x4f, 0x1e, 0xe3, 0xaa, 0xc1, 0x72, 0x0e, 0x6b, 0x1a,
	0x5f, 0x73, 0x42, 0xa1, 0x03, 0x8e, 0x37, 0xda, 0xee, 0xa8, 0x60, 0x53, 0x46, 0x09, 0x6a, 0x9c,
	0x6a, 0x67, 0x8d, 0xa1, 0x91, 0x26, 0x66, 0x77, 0x4b, 0xab, 0x6c, 0xb2, 0x9c, 0x4e, 0x4d, 0xef,
	0xb6, 0xc8, 0xc2, 0xaf, 0x40, 0x3b, 0x92, 0x82, 0x52, 0xe9, 0x62, 0x42, 0x04, 0x8d, 0x22, 0xa4,
	0x2b, 0x63, 0x9f, 0xa6, 0x89, 0xd9, 0xc9, 0xc4, 0x36, 0xab, 0x96, 0x73, 0x90, 0x27, 0x06, 0x79,
	0x0c, 0x07, 0xe0, 0x70, 0xb3, 0xa3, 0x8f, 0x80, 0x12, 0x40, 0x69, 0x62, 0x7e, 0xb2, 0x2d, 0xd0,
	0xb7, 0x9c, 0xf6, 0x86, 0x42, 0x1f, 0x42, 0xb0, 0xe3, 0x31, 0xb9, 0x44, 0x4d, 0xf5, 0xc4, 0xd5,
	0x3a, 0xb7, 0x85, 0x25, 0x75, 0x43, 0xc1, 0xef, 0x58, 0xe0, 0x51, 0xd4, 0x7a, 0x6c, 0xab, 0x5e,
	0x55, 0xb6, 0xb0, 0xa4, 0xa3, 0x22, 0xce, 0xf6, 0xd1, 0x3d, 0x0b, 0xdd, 0x90, 0x47, 0x12, 0xfb,
	0xe8, 0x60, 0x73, 0x1f, 0x55, 0x15, 0xcb, 0xd1, 0xef, 0x59, 0x38, 0x52, 0x6b, 0x88, 0xc0, 0xbe,
	0xc7, 0xe3, 0x40, 0x8a, 0x25, 0x6a, 0x2b, 0x2b, 0x65, 0x68, 0xfd, 0xdc, 0x00, 0x9d, 0xfa, 0x3e,
	0x1f, 0xe1, 0xa5, 0xcf, 0x31, 0x79, 0xdb, 0xea, 0x6f, 0x5b, 0xfd, 0x3d, 0xdb, 0xea, 0xf0, 0x07,
	0x00, 0x3c, 0x41, 0xb1, 0xa4, 0xc4, 0xc5, 0x12, 0xfd, 0x99, 0xbd, 0xba, 0x66, 0xbf, 0x6b, 0xe7,
	0x97, 0x9d, 0x5d, 0x5e, 0x0a, 0xf6, 0xfa, 0xf2, 0x51, 0x36, 0xd5, 0xa8, 0x0a, 0xb3, 0x1e, 0x7e,
	0x33, 0x35, 0x47, 0x2f, 0x12, 0x03, 0x99, 0x89, 0xc6, 0x21, 0x29, 0x45, 0xff, 0x7a, 0x85, 0x68,
	0x85, 0x15, 0xa2, 0x45, 0x62, 0x20, 0xe1, 0x2d, 0x68, 0x62, 0xe1, 0xcd, 0xd9, 0x5d, 0xae, 0xfa,
	0xf7, 0xf3, 0xaa, 0xd9, 0x7b, 0xfa, 0x38, 0x53, 0xad, 0x71, 0xb9, 0x2c, 0x28, 0x33, 0xb9, 0x59,
	0x42, 0x7d, 0x5a, 0x98, 0xfd, 0xe7, 0x15, 0x66, 0x2b, 0xac, 0x30, 0x5b, 0x24, 0x06, 0xb2, 0x9f,
	0x6a, 0xa0, 0x55, 0x3f, 0x41, 0x60, 0x00, 0xe0, 0xf6, 0xfd, 0x09, 0x2f, 0xed, 0x77, 0x7f, 0xa4,
	0xd8, 0x4f, 0xdf, 0xb9, 0xdd, 0xd3, 0x6d, 0x2e, 0xff, 0xaa, 0x28, 0x4f, 0x22, 0x28, 0xc0, 0x67,
	0xdf, 0xd1, 0x0d, 0x70, 0xb8, 0x5c, 0x17, 0x9f, 0xc5, 0xbb, 0x17, 0xcf, 0x19, 0x7b, 0xe2, 0x78,
	0x1c, 0x1a, 0xbf, 0xac, 0x0c, 0xed, 0xd7, 0x95, 0xa1, 0xfd, 0xbe, 0x32, 0xb4, 0x87, 0x3f, 0x8c,
	0x0f, 0x7e, 0x6a, 0x95, 0x50, 0xc6, 0x4c, 0xf6, 0xd4, 0xc3, 0xbc, 0xf8, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x19, 0xbd, 0xc6, 0x95, 0xaf, 0x09, 0x00, 0x00,
}
