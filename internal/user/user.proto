syntax = "proto3";

package canaryhealth.idp.user;
option go_package = "user";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "google/protobuf/timestamp.proto";
import "github.com/canary-health/protobuf/types/atTimestamps.proto";
import "github.com/canary-health/protobuf/types/uuid.proto";
import "github.com/canary-health/protobuf/types/listOpts.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;

// User
service User {
  // UpsertUser inserts or updates a user wih given options  
  rpc UpsertUser(UpsertUserOpts) returns (UserUUID);

  // GetUserByUserUUID fetches and returns a User details for the given UUID
  // rpc GetUserByUserUUID(canaryhealth.protobuf.UUID) returns (UserPayload);
  
  // AuthUserByEmailAndPassword fetches and returns an User UUID for the given opts
  rpc AuthenticateUser(AuthenticateUserOpts) returns (UserUUID);
  
  // ListUser should not contain PII
  // rpc ListUser(canaryhealth.protobuf.ListOpts) returns (UserResponse);
  
  // UpdateUserDuration updates a user duration
  // rpc UpdateUserDuration(UpdateUserDurationOpts) returns (canaryhealth.protobuf.UpdatedAt);

  // DeleteUserByUserUUID deletes a User for the given UUID
  // rpc DeleteUserByUserUUID(canaryhealth.protobuf.UUID) returns (canaryhealth.protobuf.DeletedAt);
  
  // ArchiveUserByUserUUID achives a User for the given UUID
  // rpc ArchiveUserByUserUUID(canaryhealth.protobuf.UUID) returns (canaryhealth.protobuf.ArchivedAt);
  // UnarchiveUserByUserUUID achives a User for the given UUID
  // rpc UnarchiveUserByUserUUID(canaryhealth.protobuf.UUID) returns (canaryhealth.protobuf.ArchivedAt);

  // rpc SearchUser(SearchRequest) returns (UserResponse);

}

message UserUUID {
  string user_uuid = 1 [
    (gogoproto.customname) = "UserUUID", 
    (gogoproto.moretags) = "db:\"user_uuid\""
    ];
}

message UpsertUserOpts {
  string user_uuid = 1 [
    (gogoproto.customname) = "UserUUID", 
    (gogoproto.moretags) = "db:\"user_uuid\""
    ];  
  string service_slug = 2 [
    (gogoproto.moretags) = "db:\"service_slug\""
    ];
  string email = 3;
  string password = 4;
  string verify_password = 5;
}

message AuthenticateUserOpts {
  string service_slug = 1 [
    (gogoproto.moretags) = "db:\"service_slug\""
    ];
  string email = 2;
  string password = 3;
}

message AuthenticateUserPayload {
  string user_uuid = 1 [
    (gogoproto.customname) = "UserUUID", 
    (gogoproto.moretags) = "db:\"user_uuid\""
    ];  
  string service_slug = 2 [
    (gogoproto.moretags) = "db:\"service_slug\""
    ];
  string email = 3;
  string password = 4;
}

// UserPayload should never include password 
message UserPayload {
  string user_uuid = 1 [
    (gogoproto.customname) = "UserUUID", 
    (gogoproto.moretags) = "db:\"user_uuid\""
    ];  
  string service_slug = 2 [
    (gogoproto.moretags) = "db:\"service_slug\""
    ];  
  string email = 3;
  google.protobuf.Timestamp created_at = 996 [
    (gogoproto.moretags) = "db:\"created_at\"", 
    (gogoproto.stdtime) = true
    ];
  google.protobuf.Timestamp updated_at = 997 [
    (gogoproto.moretags) = "db:\"updated_at\"", 
    (gogoproto.stdtime) = true
    ];
  google.protobuf.Timestamp archived_at = 998 [
    (gogoproto.moretags) = "db:\"archived_at\"", 
    (gogoproto.stdtime) = true
    ];  
  google.protobuf.Timestamp deleted_at = 999 [
    (gogoproto.moretags) = "db:\"deleted_at\"", 
    (gogoproto.stdtime) = true
    ];  
}

message UserResponse {
  repeated UserPayload data = 1;
}