// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import user "github.com/canary-health/idp/internal/user"

// UserDatabase is an autogenerated mock type for the UserDatabase type
type UserDatabase struct {
	mock.Mock
}

// AuthenticateUser provides a mock function with given fields: ctx, opts
func (_m *UserDatabase) AuthenticateUser(ctx context.Context, opts *user.AuthenticateUserOpts) (*user.UserUUID, error) {
	ret := _m.Called(ctx, opts)

	var r0 *user.UserUUID
	if rf, ok := ret.Get(0).(func(context.Context, *user.AuthenticateUserOpts) *user.UserUUID); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserUUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.AuthenticateUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUser provides a mock function with given fields: ctx, opts
func (_m *UserDatabase) UpsertUser(ctx context.Context, opts *user.UpsertUserOpts) (*user.UserUUID, error) {
	ret := _m.Called(ctx, opts)

	var r0 *user.UserUUID
	if rf, ok := ret.Get(0).(func(context.Context, *user.UpsertUserOpts) *user.UserUUID); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserUUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.UpsertUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
